pipeline {
    agent any

    parameters {
        string(name: 'DOCKER_IMAGE', defaultValue: 'flask-app', description: 'Docker image name')
        string(name: 'DOCKER_TAG', defaultValue: 'latest', description: 'Docker image tag')
    }

    environment {
        APP_PORT = '5000' /* Flask app port */
        APP_URL = "http://localhost:${APP_PORT}" /* URL to access the app */
    }

    triggers {
        githubPush()  // Automatically trigger on GitHub push
    }

    stages {
        stage('Build Docker Image') {
            steps {
                script {
                    echo 'Building Docker image...'
                    bat '''
                        docker build -t %DOCKER_IMAGE%:%DOCKER_TAG% .
                    '''
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                script {
                    echo 'Running new Docker container...'
                    bat '''
                        REM Stop and remove any container using the specified port
                        for /f "tokens=*" %%i in ('docker ps -q --filter "publish=%APP_PORT%"') do (
                            docker stop %%i
                            docker rm %%i
                        )
                        
                        REM Run the new Docker container
                        docker run -d -p %APP_PORT%:%APP_PORT% --name %DOCKER_IMAGE% %DOCKER_IMAGE%:%DOCKER_TAG%
                    '''

                    echo 'Waiting for Docker container logs...'
                    sleep time: 10, unit: 'SECONDS'
                    bat 'docker logs %DOCKER_IMAGE%'
                }
            }
        }
stage('Verify Flask App') {
    steps {
        script {
            echo 'Verifying if the Flask application is accessible...'
            retry(12) { // Retry up to 12 times, with a delay between each attempt
                sleep time: 5, unit: 'SECONDS'
                def response
                
                // Use appropriate command based on the operating system
                if (isUnix()) {
                    // For Unix/Linux
                    response = sh(script: "curl -s -o /dev/null -w '%{http_code}' ${APP_URL}", returnStdout: true).trim()
                } else {
                    // For Windows (ensure PowerShell or Command Prompt syntax is correct)
                    response = bat(script: "curl -s -o nul -w %%{http_code} ${APP_URL}", returnStdout: true).trim()
                    // Extract the HTTP status code using regex
                    response = response.replaceAll(".*?([0-9]{3})", "\$1")
                }
                
                // Log the response for debugging
                echo "HTTP response code: ${response}"
                
                // Validate the response code
                if (response != '200') {
                    error("Flask app is not ready. HTTP Code: ${response}. Retrying...")
                }
            }
            echo "Flask app is successfully running and accessible at ${APP_URL}"
        }
    }
}


        stage('Test Flask App') {
            steps {
                script {
                    echo "Testing Flask application at ${APP_URL}..."
                    def response = sh(script: "curl -s ${APP_URL}", returnStdout: true).trim()
                    echo "Response: ${response}"
                }
            }
        }
    }

    post {
        success {
            echo 'Deploy pipeline completed successfully!'
        }
        failure {
            echo 'Deploy pipeline failed. Please check the logs for more details.'
            echo 'Showing container logs for debugging...'
            sh 'docker logs ${DOCKER_IMAGE}'
        }
    }
}

pipeline {
    agent any

    parameters {
        string(name: 'DOCKER_IMAGE', defaultValue: 'flask-app', description: 'Docker image name')  // Default value: 'flask-app'
        string(name: 'DOCKER_TAG', defaultValue: 'latest', description: 'Docker image tag')         // Default value: 'latest'
    }

    environment {
        APP_PORT = '5000'                          // Flask app port
        APP_URL = "http://localhost:${APP_PORT}"    // URL to test the app
    }

    triggers {
        githubPush() // Automatically trigger on GitHub push
    }

    stages {
        stage('Checkout SCM') {
            steps {
                script {
                    echo 'Checking out code from GitHub...'
                    checkout scm
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo 'Building Docker image...'
                    try {
                        sh '''
                            docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .
                        '''
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        error("Docker image build failed. Please check the logs.")
                    }
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                script {
                    echo 'Stopping and removing any previous containers...'
                    try {
                        sh '''
                            docker ps -q --filter "name=${DOCKER_IMAGE}" | xargs -r docker stop
                            docker ps -a -q --filter "name=${DOCKER_IMAGE}" | xargs -r docker rm
                        '''
                    } catch (Exception e) {
                        echo "Error stopping or removing containers: ${e}"
                    }

                    echo 'Running new Docker container...'
                    try {
                        sh '''
                            docker run -d -p ${APP_PORT}:${APP_PORT} --name ${DOCKER_IMAGE} ${DOCKER_IMAGE}:${DOCKER_TAG}
                        '''
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        error("Failed to run Docker container. Please check the logs.")
                    }

                    echo 'Waiting for Docker container logs...'
                    sleep time: 10, unit: 'SECONDS'
                    try {
                        sh 'docker logs ${DOCKER_IMAGE}'
                    } catch (Exception e) {
                        echo "Error fetching logs: ${e}"
                    }
                }
            }
        }

        stage('Verify Flask App') {
            steps {
                script {
                    echo 'Verifying if the Flask application is accessible...'
                    retry(12) { // Retry up to 12 times, with a delay between each attempt
                        sleep time: 5, unit: 'SECONDS'
                        def response = sh(script: "curl -s -o /dev/null -w '%{http_code}' ${APP_URL}", returnStdout: true).trim()
                        echo "HTTP Response: ${response}"
                        if (response != '200') {
                            error("Flask app is not ready. Retrying...")
                        }
                    }
                    echo "Flask app is successfully running and accessible at ${APP_URL}"
                }
            }
        }

        stage('Test Flask App') {
            steps {
                script {
                    echo "Testing Flask application at ${APP_URL}..."
                    def response = sh(script: "curl -s ${APP_URL}", returnStdout: true).trim()
                    echo "Response: ${response}"
                }
            }
        }
    }

    post {
        success {
            echo 'Deploy pipeline completed successfully!'
        }
        failure {
            echo 'Deploy pipeline failed. Please check the logs for more details.'
            echo 'Showing container logs for debugging...'
            try {
                sh 'docker logs ${DOCKER_IMAGE}'
            } catch (Exception e) {
                echo "Error fetching logs for debugging: ${e}"
            }
        }
    }
}

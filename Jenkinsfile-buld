pipeline {
    agent any

    parameters {
        string(name: 'DOCKER_IMAGE', defaultValue: 'flask-app', description: 'Docker image name')
        string(name: 'DOCKER_TAG', defaultValue: 'latest', description: 'Docker image tag')
    }

    environment {
        APP_PORT = '5001'                   // Changed Flask app port to avoid conflict
        APP_URL = "http://localhost:${APP_PORT}" // Updated URL to use the new port
    }

    triggers {
        githubPush() // Automatically trigger on GitHub push
    }

    stages {
        stage('Build Docker Image') {
            steps {
                script {
                    echo 'Building Docker image...'
                    sh '''
                        docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .
                    '''
                }
            }
        }

        stage('Stop and Remove Previous Containers') {
            steps {
                script {
                    echo 'Stopping and removing any previous containers...'
                    // Stop and remove old containers based on the DOCKER_IMAGE name
                    sh '''
                        docker ps -q --filter "name=${DOCKER_IMAGE}" | xargs -r docker stop
                        docker ps -a -q --filter "name=${DOCKER_IMAGE}" | xargs -r docker rm
                    '''
                }
            }
        }

        stage('Remove Old Docker Images') {
            steps {
                script {
                    echo 'Removing old Docker images...'
                    // Remove old images, if they are dangling or not the latest one
                    sh '''
                        docker images -q --filter "dangling=true" | xargs -r docker rmi
                        docker images -q --filter "reference=${DOCKER_IMAGE}" | grep -v ${DOCKER_TAG} | xargs -r docker rmi
                    '''
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                script {
                    echo 'Running new Docker container...'
                    // Run the latest Docker container
                    sh '''
                        docker run -d -p ${APP_PORT}:${APP_PORT} --name ${DOCKER_IMAGE} ${DOCKER_IMAGE}:${DOCKER_TAG}
                    '''

                    echo 'Waiting for Docker container logs...'
                    sleep time: 10, unit: 'SECONDS'
                    sh 'docker logs ${DOCKER_IMAGE}'
                }
            }
        }

        stage('Verify Flask App') {
            steps {
                script {
                    echo 'Verifying if the Flask application is accessible...'
                    retry(12) { // Retry up to 12 times, with a delay between each attempt
                        sleep time: 5, unit: 'SECONDS'
                        def response = sh(script: "curl -s -o /dev/null -w '%{http_code}' ${APP_URL}", returnStdout: true).trim()
                        echo "HTTP Response: ${response}"
                        if (response != '200') {
                            error("Flask app is not ready. Retrying...")
                        }
                    }
                    echo "Flask app is successfully running and accessible at ${APP_URL}"
                }
            }
        }

        stage('Test Flask App') {
            steps {
                script {
                    echo "Testing Flask application at ${APP_URL}..."
                    def response = sh(script: "curl -s ${APP_URL}", returnStdout: true).trim()
                    echo "Response: ${response}"
                }
            }
        }
    }

    post {
        success {
            echo 'Build pipeline completed successfully!'
        }
        failure {
            echo 'Build pipeline failed. Please check the logs for more details.'
            echo 'Showing container logs for debugging...'
            sh 'docker logs ${DOCKER_IMAGE}'
        }
    }
}

pipeline {
    agent any

    parameters {
        string(name: 'DOCKER_IMAGE', defaultValue: 'flask-app', description: 'Docker image name')
        string(name: 'DOCKER_TAG', defaultValue: 'latest', description: 'Docker image tag')
    }

    environment {
        APP_PORT = '5000'  // Flask app port
        APP_URL = "http://localhost:${APP_PORT}"  // URL to access the app
    }

    triggers {
        githubPush()  // Automatically trigger on GitHub push
    }

    stages {
        stage('Build Docker Image') {
            steps {
                script {
                    echo 'Building Docker image...'
                    sh '''
                        docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .
                    '''
                }
            }
        }

        stage('Stop and Remove Previous Containers') {
            steps {
                script {
                    echo 'Stopping and removing any previous containers...'
                    sh '''
                        docker ps -q --filter "name=${DOCKER_IMAGE}" | xargs -r docker stop
                        docker ps -a -q --filter "name=${DOCKER_IMAGE}" | xargs -r docker rm
                    '''
                }
            }
        }

        stage('Remove Old Docker Images') {
            steps {
                script {
                    echo 'Removing old Docker images...'
                    sh '''
                        docker images -q --filter "dangling=true" | xargs -r docker rmi
                    '''
                }
            }
        }

        stage('Check for Port Availability') {
            steps {
                script {
                    echo 'Checking if the port is available...'
                    def portUsed = sh(script: "lsof -i :${APP_PORT} -t", returnStdout: true).trim()
                    if (portUsed) {
                        echo "Port ${APP_PORT} is in use, killing process..."
                        sh "kill -9 ${portUsed}"
                    } else {
                        echo "Port ${APP_PORT} is available."
                    }
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                script {
                    echo 'Running new Docker container...'
                    sh '''
                        docker run -d -p ${APP_PORT}:${APP_PORT} --name ${DOCKER_IMAGE} ${DOCKER_IMAGE}:${DOCKER_TAG}
                    '''

                    echo 'Verifying Docker container status...'
                    sh '''
                        if ! docker ps --filter "name=${DOCKER_IMAGE}" --format "{{.Names}}" | grep -q "^${DOCKER_IMAGE}$"; then
                            echo "Error: Docker container failed to start."
                            exit 1
                        fi
                    '''

                    echo 'Waiting for Docker container logs...'
                    sleep time: 10, unit: 'SECONDS'
                    sh 'docker logs ${DOCKER_IMAGE}'
                }
            }
        }

        stage('Test Flask App') {
            steps {
                script {
                    echo "Testing Flask application at ${APP_URL}..."
                    def response = sh(script: "curl -s ${APP_URL}", returnStdout: true).trim()
                    echo "Response: ${response}"
                    if (!response) {
                        error "Flask application did not respond as expected."
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Build pipeline completed successfully!'
        }
        failure {
            echo 'Build pipeline failed. Please check the logs for more details.'
            echo 'Showing container logs for debugging...'
            sh '''
                docker logs ${DOCKER_IMAGE} || echo "No logs available."
            '''
        }
    }
}

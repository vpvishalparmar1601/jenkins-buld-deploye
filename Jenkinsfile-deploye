pipeline {
    agent any

    environment {
        APP_PORT = '5000' // Flask app port
        APP_URL = "http://localhost:${APP_PORT}" // URL to access the app
    }

    triggers {
        githubPush() // Automatically trigger on GitHub push
    }

    stages {
        stage('Run Docker Container Locally') {
    steps {
        script {
            // Fetch Docker image name and tag dynamically from the build process
            def DOCKER_IMAGE = env.DOCKER_IMAGE ?: 'flask-app'  // Default to 'flask-app' if not set
            def DOCKER_TAG = env.DOCKER_TAG ?: 'latest'         // Default to 'latest' if not set
            def APP_PORT = '5000'                               // Flask app port
            def APP_URL = "http://localhost:${APP_PORT}"         // URL to access the app locally

            echo "Running Docker container for ${DOCKER_IMAGE}:${DOCKER_TAG} on local server at ${APP_URL}"

            // Stop and remove any container using the specified port (5000)
            bat '''
                REM Stop and remove any existing container using the specified port
                for /f "tokens=*" %%i in ('docker ps -q --filter "publish=%APP_PORT%"') do (
                    docker stop %%i
                    docker rm %%i
                )
            '''
            
            // Run the Docker container locally using the image and tag from the environment
            bat """
                REM Running new Docker container on port %APP_PORT%
                docker run -d -p %APP_PORT%:%APP_PORT% --name %DOCKER_IMAGE% %DOCKER_IMAGE%:%DOCKER_TAG%
            """
            
            // Wait a few seconds to ensure the container is fully up
            echo 'Waiting for Docker container logs...'
            sleep time: 10, unit: 'SECONDS'
            
            // Fetch the logs from the container
            bat "docker logs %DOCKER_IMAGE%"
        }
    }
}

        stage('Run Docker Container Locally') {
            steps {
                script {
                    echo 'Running Docker container locally...'
                    def DOCKER_IMAGE = 'flask-app'  // Set image name
                    def DOCKER_TAG = 'latest'  // Set image tag
                    echo "Running container from image: ${DOCKER_IMAGE}:${DOCKER_TAG}"
                    
                    bat '''
                        REM Stop and remove any container using the specified port
                        for /f "tokens=*" %%i in ('docker ps -q --filter "publish=%APP_PORT%"') do (
                            docker stop %%i
                            docker rm %%i
                        )
                        
                        REM Run the new Docker container
                        docker run -d -p %APP_PORT%:%APP_PORT% --name %DOCKER_IMAGE% %DOCKER_IMAGE%:%DOCKER_TAG%
                    '''
                    
                    echo 'Waiting for Docker container logs...'
                    sleep time: 10, unit: 'SECONDS'
                    bat 'docker logs %DOCKER_IMAGE%'
                }
            }
        }

        stage('Verify Flask App') {
            steps {
                script {
                    echo 'Verifying if the Flask application is accessible...'
                    retry(12) { // Retry up to 12 times, with a delay between each attempt
                        sleep time: 5, unit: 'SECONDS'
                        def response
                        
                        // Use appropriate command based on the operating system
                        if (isUnix()) {
                            // For Unix/Linux
                            response = sh(script: "curl -s -o /dev/null -w '%{http_code}' ${APP_URL}", returnStdout: true).trim()
                        } else {
                            // For Windows (ensure PowerShell or Command Prompt syntax is correct)
                            response = bat(script: "curl -s -o nul -w %%{http_code} ${APP_URL}", returnStdout: true).trim()
                            // Extract the HTTP status code using regex
                            response = response.replaceAll(".*?([0-9]{3})", "\$1")
                        }
                        
                        echo "HTTP response code: ${response}"
                    }
                    echo "Flask app is successfully running and accessible at ${APP_URL}"
                }
            }
        }
    }

    post {
        success {
            echo 'Deploy pipeline completed successfully!'
        }
        failure {
            echo 'Deploy pipeline failed. Please check the logs for more details.'
            echo 'Showing container logs for debugging...'
            bat "docker logs ${DOCKER_IMAGE}"
        }
    }
}
